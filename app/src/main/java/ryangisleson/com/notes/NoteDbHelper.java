package ryangisleson.com.notes;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;

public class NoteDbHelper extends SQLiteOpenHelper {
    private static final int DATABASE_VERSION = 1;
    private static final String DATABASE_NAME = "Notes.db";

    public static final String TABLE_NOTES = "notes";
    public static final String COLUMN_ID = "_id";
    public static final String COLUMN_TITLE = "title";
    public static final String COLUMN_CONTENT = "content";
    public static final String COLUMN_DATE = "date";

    public static final String TABLE_TAGS = "tags";
    public static final String COLUMN_TAG_ID = "id";
    public static final String COLUMN_TAG = "tag";

    public NoteDbHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
        super(context, DATABASE_NAME, factory, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        String createNoteTable = "CREATE TABLE " + TABLE_NOTES + " (" +
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_TITLE + " TEXT, " +
                COLUMN_CONTENT + " TEXT, " +
                COLUMN_DATE + " TEXT " +
                ");";
        String createTagTable =  "CREATE TABLE " + TABLE_TAGS + " (" +
                COLUMN_TAG_ID + " INTEGER, " +
                COLUMN_TAG + " TEXT " +
                ");";
        db.execSQL(createNoteTable);
        db.execSQL(createTagTable);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NOTES + ";");
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_TAGS + ";");
        onCreate(db);
    }

    public void deleteAll() {
        SQLiteDatabase db = getWritableDatabase();
        db.delete(TABLE_NOTES, null, null);
        db.delete(TABLE_TAGS, null, null);
    }

    public int addNote(Note note) {
        SQLiteDatabase db = getWritableDatabase();

        // ContentValues lets you construct and add whole row before adding it
        ContentValues values = new ContentValues();
        values.put(COLUMN_TITLE, note.title);
        values.put(COLUMN_CONTENT, note.content);
        values.put(COLUMN_DATE, note.date);
        int id = (int) db.insert(TABLE_NOTES, null, values); // the autogenerated id for row

        ArrayList<String> tags = note.tags;
        for (String tag : tags) {
            System.out.println("add: " + tag);
            ContentValues tagValues = new ContentValues();
            tagValues.put(COLUMN_TAG, tag);
            tagValues.put(COLUMN_TAG_ID, id);
            db.insert(TABLE_TAGS, null, tagValues);
        }

        return  id;
    }

    public void deleteNote(Note note) {
        SQLiteDatabase db = getWritableDatabase();
        String[] whereArgs = { Integer.toString(note._id) };
        db.delete(TABLE_NOTES, COLUMN_ID + " = ?", whereArgs);
        db.delete(TABLE_TAGS, COLUMN_TAG_ID + " = ?", whereArgs);
    }

    public void updateNote(Note note) {
        SQLiteDatabase db = getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(COLUMN_TITLE, note.title);
        values.put(COLUMN_CONTENT, note.content);
        values.put(COLUMN_DATE, note.date);

        String id = Integer.toString(note._id);
        String[] whereArgs = {id};
        db.delete(TABLE_TAGS, COLUMN_TAG_ID + " = ?", whereArgs);
        ArrayList<String> tags = note.tags;
        for (String tag : tags) {
            ContentValues tagValues = new ContentValues();
            tagValues.put(COLUMN_TAG, tag);
            tagValues.put(COLUMN_TAG_ID, id);
            db.insert(TABLE_TAGS, null, tagValues);
        }

        printAllTags();
        db.update(TABLE_NOTES, values, COLUMN_ID + " = ?", whereArgs);
    }

    public ArrayList<Note> getNotes() {
        ArrayList<Note> notes = new ArrayList<>();
        SQLiteDatabase db = getWritableDatabase();
        String query = "SELECT * FROM " + TABLE_NOTES + " ORDER BY datetime(" + COLUMN_DATE + ") DESC;";
        Cursor c = db.rawQuery(query, null);
        c.moveToFirst();

        while (!c.isAfterLast()) {
            restoreNote(notes, c);
            c.moveToNext();
        }
        c.close();
        return notes;
    }

    private void printAllTags() {
        SQLiteDatabase db = getWritableDatabase();
        String query = "SELECT * FROM " + TABLE_TAGS + ";";
        Cursor c = db.rawQuery(query, null);
        c.moveToFirst();

        while (!c.isAfterLast()) {
            String id = c.getString(c.getColumnIndex(COLUMN_TAG_ID));
            String tag = c.getString(c.getColumnIndex(COLUMN_TAG));
            c.moveToNext();
        }
        c.close();
    }

    private void restoreNote(ArrayList<Note> notes, Cursor c) {
        int id = c.getInt(c.getColumnIndex(COLUMN_ID));
        String title = c.getString(c.getColumnIndex(COLUMN_TITLE));
        String content = c.getString(c.getColumnIndex(COLUMN_CONTENT));
        String date = c.getString(c.getColumnIndex(COLUMN_DATE));
        ArrayList<String> tags = getTags(Integer.toString(id));
        notes.add(new Note(id, title, content, date, tags));
    }

    public ArrayList<String> getTags(String id) {
        ArrayList<String> tags = new ArrayList<>();
        SQLiteDatabase db = getWritableDatabase();
        String query = "SELECT * FROM " + TABLE_TAGS + " WHERE " + COLUMN_TAG_ID + " = " + id + ";";
        Cursor c = db.rawQuery(query, null);
        c.moveToFirst();

        while (!c.isAfterLast()) {
            String tag = c.getString(c.getColumnIndex(COLUMN_TAG));
            tags.add(tag);
            c.moveToNext();
        }
        c.close();
        return tags;
    }

    public ArrayList<Note> searchNotes(String searchQuery) {
        ArrayList<Note> notes = new ArrayList<>();
        SQLiteDatabase db = getWritableDatabase();
        String query = "SELECT * FROM " + TABLE_NOTES + " ORDER BY datetime(" + COLUMN_DATE + ") DESC;";
        Cursor c = db.rawQuery(query, null);
        c.moveToFirst();

        ArrayList<Integer> ids = searchTags(searchQuery);

        while (!c.isAfterLast()) {
            int id = c.getInt(c.getColumnIndex(COLUMN_ID));
            String title = c.getString(c.getColumnIndex(COLUMN_TITLE));
            String content = c.getString(c.getColumnIndex(COLUMN_CONTENT));
            String searchRegEx = ".*\\b" + searchQuery.toLowerCase() + "\\b.*";
            if (ids.contains(id)
                    || title.toLowerCase().matches(searchRegEx)
                    || content.toLowerCase().matches(searchRegEx)) {
                restoreNote(notes, c);
            }
            c.moveToNext();
        }
        c.close();
        return notes;
    }

    private ArrayList<Integer> searchTags(String searchQuery) {
        ArrayList<Integer> ids = new ArrayList<>();
        SQLiteDatabase db = getWritableDatabase();
        String query = "SELECT * FROM " + TABLE_TAGS + ";";
        Cursor c = db.rawQuery(query, null);
        c.moveToFirst();

        while (!c.isAfterLast()) {
            String tag = c.getString(c.getColumnIndex(COLUMN_TAG));
            if (tag.contains(searchQuery))
                ids.add(c.getInt(c.getColumnIndex(COLUMN_TAG_ID)));
            c.moveToNext();
        }
        c.close();
        return ids;
    }
}
